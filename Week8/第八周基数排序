#include <iostream>
#include <math.h>

using namespace std;

bool bubbleSort(int array[], size_t arrLen) {
    if (arrLen < 0) {//不符合条件的数组不排序 
        cout << "Please check your input." << endl;
        return false;
    }


    for (int orderedNum = 0; orderedNum < arrLen; ++orderedNum) {//利用for循环遍历整个数组
        bool isExchanged = false;//定义判断是否完成排序条件isExchanged? 
        for (int i = 0; i < arrLen - orderedNum -1; ++i) {//利用for循环进行次数递减的遍历，因为本次排序的最大元素已在数组末尾，无需再次遍历 
            if (array[i] > array[i+1]) {//如果前一个元素大于后一个元素，进行交换。 
                int temp = array[i];
                array[i] = array[i+1];
                array[i+1] = temp;
                isExchanged = true;
            }
        }
        if (!isExchanged) {//如果没进行交换，即已有序，结束循环 
            break;
        }
    }
    return true;
}

bool bubbleSort_Sheng(int array[], size_t arrLen) {//冒泡排序
    if (arrLen < 0) {//不符合条件的数组不排序 
        cout << "Please check your input." << endl;
        return false;
    }
    int orderedNum = 0;
    while (true) { 
        bool isExchanged = false;//定义判断是否完成排序条件isExchanged? 
        for (int i = 0; i < arrLen - orderedNum -1; ++i) {//利用for循环进行次数递减的遍历，因为本次排序的最大元素已在数组末尾，无需再次遍历 
            if (array[i] > array[i+1]) {//如果前一个元素大于后一个元素，进行交换。 
                int temp = array[i];
                array[i] = array[i+1];
                array[i+1] = temp;
                isExchanged = true;//表明已进行元素的交换 
            }
        }

        if (!isExchanged) {//若没进行交换，即已有序，结束while循环。 
            break;
        }
        ++orderedNum;//执行完for循环仍未排序完毕，则数组元素向右移动一位 
    }
    return true;
}

void printArray(int array[], int arrLen) {
    for (int i = 0; i < arrLen; ++i) {
        cout << array[i] << " ";
    }
    cout << endl;
}
int main(){
    int array0[] = {};
    int arrayLen = sizeof(array0)/sizeof(int);
    printArray(array0, arrayLen);
    bubbleSort(array0, arrayLen);
    printArray(array0, arrayLen);
    cout << "=========================================" << endl;
    int array1[] = {1};
    arrayLen = sizeof(array1)/sizeof(int);
    printArray(array1, arrayLen);
    bubbleSort_Sheng(array1, arrayLen);
    printArray(array1, arrayLen);
    cout << "=========================================" << endl;
    int array2[] = {2, 1};
    arrayLen = sizeof(array2)/sizeof(int);
    printArray(array2, arrayLen);
    bubbleSort(array2, arrayLen);
    printArray(array2, arrayLen);
    cout << "=========================================" << endl;
    int array3[] = {1, 5, 3};
    arrayLen = sizeof(array3)/sizeof(int);
    printArray(array3, arrayLen);
    bubbleSort_Sheng(array3, arrayLen);
    printArray(array3, arrayLen);
    cout << "=========================================" << endl;
    int array4[] = {9, 12, 8, 7};
    arrayLen = sizeof(array4)/sizeof(int);
    printArray(array4, arrayLen);
    bubbleSort(array4, arrayLen);
    printArray(array4, arrayLen);
    cout << "=========================================" << endl;
    int array5[] = {9, 12, 8, 7, 3};
    arrayLen = sizeof(array5)/sizeof(int);
    printArray(array5, arrayLen);
    bubbleSort_Sheng(array5, arrayLen);
    printArray(array5, arrayLen);
}
