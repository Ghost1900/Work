#include <iostream>
#include <math.h>
using namespace std;
bool insertSort(int array[], size_t arrLen) {
    if (arrLen < 0) {//不符合条件的数组不参与排序 
        cout << "Please check your input." << endl;
        return false;
    }
    for (int orderedNum = 1; orderedNum < arrLen; ++orderedNum) {//利用for循环遍历整个数组 
        int insertValue = array[orderedNum];//初始化插入的值为数组的第二个元素的值 
        int orderedIndex = orderedNum - 1;//初始化索引值为首元素位置下标 
        for (; orderedIndex >= 0; --orderedIndex) {//如果索引值大于等于0，向左遍历数组 
            if (insertValue < array[orderedIndex]) {//如果判断值小于索引值 
                array[orderedIndex + 1] = array[orderedIndex];//使得索引值下一个元素的值为索引元素的值 
            }
            else {//否则，中止循环 
                break;
            }
        }
        array[orderedIndex+1] = insertValue;//索引值下一个元素的值为插入元素的值 
    }
    return true;
}
bool insertSort_Sen(int array[], size_t arrLen) {
     if (arrLen < 0) {//不符合条件的数组不参与排序 
        cout << "Please check your input." << endl;
        return false;
    }
    for (int orderedNum = 1; orderedNum < arrLen; ++orderedNum) {//利用for循环遍历整个数组 
        int insertValue = array[orderedNum];//初始化插入的值为数组的第二个元素的值 
        int orderedIndex = orderedNum - 1;//初始化索引值为首元素位置下标 
        while(orderedIndex >=0 && array[orderedIndex] > insertValue) {//如果索引值大于等于0，且如果判断值小于索引值 向左遍历数组
           array[orderedIndex + 1] = array[orderedIndex];//使得索引值下一个元素的值为索引元素的值
           --orderedIndex;//向左继续遍历 直至遍历整个数组 
        }
        array[orderedIndex+1] = insertValue;//索引值下一个元素的值为插入元素的值
    }
    return true;
}
void printArray(int array[], int arrLen) {
    for (int i = 0; i < arrLen; ++i) {
        cout << array[i] << " ";
    }
    cout << endl;
}
int main(){
    int array0[] = {};
    int arrayLen = sizeof(array0)/sizeof(int);
    printArray(array0, arrayLen);
    insertSort(array0, arrayLen);
    printArray(array0, arrayLen);
    cout << "=========================================" << endl;
    int array1[] = {1};
    arrayLen = sizeof(array1)/sizeof(int);
    printArray(array1, arrayLen);
    insertSort_Sen(array1, arrayLen);
    printArray(array1, arrayLen);
    cout << "=========================================" << endl;
    int array2[] = {2, 1};
    arrayLen = sizeof(array2)/sizeof(int);
    printArray(array2, arrayLen);
    insertSort(array2, arrayLen);
    printArray(array2, arrayLen);
    cout << "=========================================" << endl;
    int array3[] = {1, 5, 3};
    arrayLen = sizeof(array3)/sizeof(int);
    printArray(array3, arrayLen);
    insertSort_Sen(array3, arrayLen);
    printArray(array3, arrayLen);
    cout << "=========================================" << endl;
    int array4[] = {9, 12, 8, 7};
    arrayLen = sizeof(array4)/sizeof(int);
    printArray(array4, arrayLen);
    insertSort(array4, arrayLen);
    printArray(array4, arrayLen);
    cout << "=========================================" << endl;
    int array5[] = {9, 12, 8, 7, 3};
    arrayLen = sizeof(array5)/sizeof(int);
    printArray(array5, arrayLen);
    insertSort_Sen(array5, arrayLen);
    printArray(array5, arrayLen);
}
