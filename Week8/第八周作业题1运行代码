#include <iostream>
#include <math.h>
using namespace std;
bool countingSort(int array[], size_t arrLen) {
    if (arrLen < 2) {//如果数组长度为0或1，则无需进行排序 
        return true;
    }
    //Find maximum and minimal value
    int max = array[0];//初始化数组中最大值为数组中首元素的值 
    int min = array[0];//初始化书中最小值为数组中首元素的值 
    for (size_t i = 1; i < arrLen; ++i)
    {
        if (min > array[i]) {//如果最小值大于i-位置上的值 
            min = array[i];//则令array[i]为最小值 
        }
        else if (max < array[i]) {//否则，假如最小值不小于i-1位置上的值，且最大值小于i-位置上的值 
            max = array[i];//令i-1位置上的值为最大值 
        }
    }
    // Create counting buckets
    int *countingBuckets = new int[max - min + 1]();//定义计数桶指针，指向int类型数组 
    // Count number of values in array
    for (size_t j = 0; j < arrLen; ++j)//定义j=0; 
    {
        ++countingBuckets[array[j] - min];//赋予指针指向数组的值，同时指向下一个位置的元素 
    }

    // Accumulate coutingBuckets to find the last ordered location of value in array
    for (size_t k = 1; k < (max - min + 1); ++k)//遍历整个数组 
    {
        countingBuckets[k] += countingBuckets[k-1];//值 
    }
    //Traverse the array in reversed order
    int *tempArray = new int[arrLen]();//定义指针 
    for (int l = arrLen - 1; l >= 0; --l)//向左遍历整个数组 
    {
        tempArray[--countingBuckets[array[l] - min]] = array[l];//定义 
    }
    for (size_t m = 0; m < arrLen; ++m)
    {
        array[m] = tempArray[m];//导入排序完的数组. 
    }
    delete [] countingBuckets;//释放指针countingBuckets
    delete [] tempArray;//释放指针tempArray 
    return true;
}
int main()
{int arr[1000];
int N;
int K;
printf("采用快速排序\n");
printf("请输入无序数组的长度,即元素数:");
scanf("%d",&N); 
printf("请输入无序数中的元素组以进行排序:");
for(int i=0;i<N;i++)
{scanf("%d",&arr[i]);
}
countingSort(arr,N);
printf("排序后的数组为:");
for(int i=0;i<N;i++)
{printf("%d ",arr[i]);
}
printf("\n");
printf("请输入K，以用来查询第K位置上的元素数据");
scanf("%d",&K);
printf("第k位置上的元素数据为%d",arr[K-1]);
return 0;
 } 
