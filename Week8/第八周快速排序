#include <iostream>
#include <math.h>
#include <cstdlib>
using namespace std;
int partition(int array[], size_t arrStart, size_t pivot, size_t arrEnd) {//划分函数 
   int arrayLen = arrEnd - arrStart;//记录数组的长度 
   if ( arrayLen < 1 || pivot < arrStart || pivot >= arrEnd) {//如果数组长度小于1，数组中间下标小于数组起始下标或者大于数组末尾下标，不执行 
       cout << "Please check your implementation." << endl;
       return -1;//用于判断不符合条件的状况 
   }
   int pivotValue = array[pivot];//基准元素 
   array[pivot] = array[arrEnd - 1];//令数组中间的值为数组末尾的值 
   int pivotPos = arrStart;//用pivoPos记录数组开头元素的下标 
   int temp;//定义中间量 
   for (int i = arrStart; i < arrEnd - 1; ++i)//遍历整个数组 
   {
       if (array[i] < pivotValue) {//如果起点值小于中间值 
          temp = array[pivotPos];//执行互换 
          array[pivotPos] = array[i];
          array[i] = temp;
          ++pivotPos;//互换完后使pivotPos+1; 即从数组头右移一位 
       }
   }
   array[arrEnd - 1] = array[pivotPos];//让结尾元素的值为基准元素的值 
   array[pivotPos] = pivotValue;//将基准元素位置上的值赋值为基准元素 
   return pivotPos;
}
bool quickSort(int array[], size_t arrStart, size_t arrEnd) {
    int arrLen = arrEnd - arrStart;//计算数组的长度 
    if (arrLen < 0) {//小于0，不符合条件，无法进行排序 
        cout << "Please check your input." << endl;
        return false;
    }
    if (arrLen == 0 || arrLen == 1) {//数组中仅有1个元素,已排序完 
        return true;
    } 
    srand(array[array[arrStart] + arrLen + array[arrEnd - 1]]);//在数组长度内随机取一个数 
    int pivot = arrStart + floor(((arrLen - 1) + (size_t)rand()) % (arrLen - 1));//基准元素
    int pivotPos = partition(array, arrStart, pivot, arrEnd);//返回基准元素位置 
    quickSort(array, arrStart, pivotPos);//左区间递归快速排序 
    quickSort(array, pivotPos+1, arrEnd);//右区间递归快速排序 
    return true;
}
void printArray(int array[], int arrLen) {
    for (int i = 0; i < arrLen; ++i) {
        cout << array[i] << " ";
    }
    cout << endl;
}
int main(){
    int array0[] = {};
    int arrayLen = sizeof(array0)/sizeof(int);
    printArray(array0, arrayLen);
    quickSort(array0, 0, arrayLen);
    printArray(array0, arrayLen);
    cout << "=========================================" << endl;
    int array1[] = {1};
    arrayLen = sizeof(array1)/sizeof(int);
    printArray(array1, arrayLen);
    quickSort(array1, 0, arrayLen);
    printArray(array1, arrayLen);
    cout << "=========================================" << endl;
    int array2[] = {2, 1};
    arrayLen = sizeof(array2)/sizeof(int);
    printArray(array2, arrayLen); 
    quickSort(array2, 0, arrayLen);
    printArray(array2, arrayLen);
    cout << "=========================================" << endl;
    int array3[] = {1, 5, 3};
    arrayLen = sizeof(array3)/sizeof(int);
    printArray(array3, arrayLen);
    quickSort(array3, 0, arrayLen);
    printArray(array3, arrayLen);
    cout << "=========================================" << endl;
    int array4[] = {9, 12, 8, 7};
    arrayLen = sizeof(array4)/sizeof(int);
    printArray(array4, arrayLen);
    quickSort(array4, 0, arrayLen);
    printArray(array4, arrayLen);
    cout << "=========================================" << endl;
    int array5[] = {9, 12, 8, 7, 3};
    arrayLen = sizeof(array5)/sizeof(int);
    printArray(array5, arrayLen);
    quickSort(array5, 0, arrayLen);
    printArray(array5, arrayLen);
}
